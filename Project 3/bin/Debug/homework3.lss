
bin/Debug/homework3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000572  00000606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  0000054a  0000054a  000005de  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000084  0080013a  0080013a  00000640  2**0
                  ALLOC
  4 .stab         000009fc  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000981  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019e0  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  000025b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c1 01 	jmp	0x382	; 0x382 <__vector_18>
  4c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3b       	cpi	r26, 0xBE	; 190
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a3 02 	jmp	0x546	; 0x546 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 *
 * NOTE: Return statement was unreachable, so it was
 * removed.
 */
int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
    uart_init();
  ae:	0e 94 aa 01 	call	0x354	; 0x354 <uart_init>
    writestr("SER486 HW3 - Andrew Goodman\n\r");
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	0e 94 a0 00 	call	0x140	; 0x140 <writestr>
    writehex8(0x0A);
  ba:	8a e0       	ldi	r24, 0x0A	; 10
  bc:	0e 94 cc 00 	call	0x198	; 0x198 <writehex8>
    writestr("\n\r");
  c0:	8e e1       	ldi	r24, 0x1E	; 30
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	0e 94 a0 00 	call	0x140	; 0x140 <writestr>
    writehex16(0xC0DE);
  c8:	8e ed       	ldi	r24, 0xDE	; 222
  ca:	90 ec       	ldi	r25, 0xC0	; 192
  cc:	0e 94 22 01 	call	0x244	; 0x244 <writehex16>
    writestr("\n\r");
  d0:	8e e1       	ldi	r24, 0x1E	; 30
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	0e 94 a0 00 	call	0x140	; 0x140 <writestr>
    blink_led("--- -.-");
  d8:	81 e2       	ldi	r24, 0x21	; 33
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 38 01 	call	0x270	; 0x270 <blink_led>
    while(1);
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x3a>

000000e2 <delay>:
 * future hardware changes.  Ideally a timer should be
 * used instead of a set of for loops.  Timers will be
 * taught later in the semester.
 */
void delay(unsigned int msec)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	00 d0       	rcall	.+0      	; 0xe8 <delay+0x6>
  e8:	00 d0       	rcall	.+0      	; 0xea <delay+0x8>
  ea:	00 d0       	rcall	.+0      	; 0xec <delay+0xa>
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	9e 83       	std	Y+6, r25	; 0x06
  f2:	8d 83       	std	Y+5, r24	; 0x05
    volatile unsigned i,j ;  /* volatile prevents loops from being optimized away */

    /* outer loop, loops for specified number of milliseconds */
    for (i=0; i<msec; i++) {
  f4:	1a 82       	std	Y+2, r1	; 0x02
  f6:	19 82       	std	Y+1, r1	; 0x01
  f8:	12 c0       	rjmp	.+36     	; 0x11e <delay+0x3c>
        /* inner loop, loops for 1 millisecond delay */
        for (j=0;j<LOOPS_PER_MSEC;j++) {}
  fa:	1c 82       	std	Y+4, r1	; 0x04
  fc:	1b 82       	std	Y+3, r1	; 0x03
  fe:	05 c0       	rjmp	.+10     	; 0x10a <delay+0x28>
 100:	8b 81       	ldd	r24, Y+3	; 0x03
 102:	9c 81       	ldd	r25, Y+4	; 0x04
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	9c 83       	std	Y+4, r25	; 0x04
 108:	8b 83       	std	Y+3, r24	; 0x03
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	9c 81       	ldd	r25, Y+4	; 0x04
 10e:	88 3e       	cpi	r24, 0xE8	; 232
 110:	93 40       	sbci	r25, 0x03	; 3
 112:	b0 f3       	brcs	.-20     	; 0x100 <delay+0x1e>
void delay(unsigned int msec)
{
    volatile unsigned i,j ;  /* volatile prevents loops from being optimized away */

    /* outer loop, loops for specified number of milliseconds */
    for (i=0; i<msec; i++) {
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	9a 83       	std	Y+2, r25	; 0x02
 11c:	89 83       	std	Y+1, r24	; 0x01
 11e:	29 81       	ldd	r18, Y+1	; 0x01
 120:	3a 81       	ldd	r19, Y+2	; 0x02
 122:	8d 81       	ldd	r24, Y+5	; 0x05
 124:	9e 81       	ldd	r25, Y+6	; 0x06
 126:	28 17       	cp	r18, r24
 128:	39 07       	cpc	r19, r25
 12a:	38 f3       	brcs	.-50     	; 0xfa <delay+0x18>
        /* inner loop, loops for 1 millisecond delay */
        for (j=0;j<LOOPS_PER_MSEC;j++) {}
    }
}
 12c:	00 00       	nop
 12e:	26 96       	adiw	r28, 0x06	; 6
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <writestr>:
 * NOTE: uart_init() should be called this function
 *   is invoked for the first time or unpredictable
 *   UART behavior may result.
 */
void writestr(char * str)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	00 d0       	rcall	.+0      	; 0x146 <writestr+0x6>
 146:	00 d0       	rcall	.+0      	; 0x148 <writestr+0x8>
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	9c 83       	std	Y+4, r25	; 0x04
 14e:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int i;

    /* loop for each character in the string */
    for (i=0; str[i]!=0;i++) {
 150:	1a 82       	std	Y+2, r1	; 0x02
 152:	19 82       	std	Y+1, r1	; 0x01
 154:	0f c0       	rjmp	.+30     	; 0x174 <writestr+0x34>
        /* output the character to the UART */
        uart_writechar(str[i]);
 156:	2b 81       	ldd	r18, Y+3	; 0x03
 158:	3c 81       	ldd	r19, Y+4	; 0x04
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	82 0f       	add	r24, r18
 160:	93 1f       	adc	r25, r19
 162:	fc 01       	movw	r30, r24
 164:	80 81       	ld	r24, Z
 166:	0e 94 ad 01 	call	0x35a	; 0x35a <uart_writechar>
void writestr(char * str)
{
    unsigned int i;

    /* loop for each character in the string */
    for (i=0; str[i]!=0;i++) {
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	9a 81       	ldd	r25, Y+2	; 0x02
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	9a 83       	std	Y+2, r25	; 0x02
 172:	89 83       	std	Y+1, r24	; 0x01
 174:	2b 81       	ldd	r18, Y+3	; 0x03
 176:	3c 81       	ldd	r19, Y+4	; 0x04
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	9a 81       	ldd	r25, Y+2	; 0x02
 17c:	82 0f       	add	r24, r18
 17e:	93 1f       	adc	r25, r19
 180:	fc 01       	movw	r30, r24
 182:	80 81       	ld	r24, Z
 184:	88 23       	and	r24, r24
 186:	39 f7       	brne	.-50     	; 0x156 <writestr+0x16>
        /* output the character to the UART */
        uart_writechar(str[i]);
    }
}
 188:	00 00       	nop
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <writehex8>:
 *
 * changes:
 *   No direct state changes.
 */
void writehex8(unsigned char num)
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	67 97       	sbiw	r28, 0x17	; 23
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	de bf       	out	0x3e, r29	; 62
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	cd bf       	out	0x3d, r28	; 61
 1ac:	8f 8b       	std	Y+23, r24	; 0x17
    unsigned char temp = num;
 1ae:	8f 89       	ldd	r24, Y+23	; 0x17
 1b0:	89 83       	std	Y+1, r24	; 0x01
    char hex[] = "0123456789ABCDEF";
 1b2:	81 e1       	ldi	r24, 0x11	; 17
 1b4:	e9 e2       	ldi	r30, 0x29	; 41
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	de 01       	movw	r26, r28
 1ba:	16 96       	adiw	r26, 0x06	; 6
 1bc:	01 90       	ld	r0, Z+
 1be:	0d 92       	st	X+, r0
 1c0:	8a 95       	dec	r24
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <writehex8+0x24>
    int i, ii;
    for(i = 0; temp >= 16; i++)
 1c4:	1b 82       	std	Y+3, r1	; 0x03
 1c6:	1a 82       	std	Y+2, r1	; 0x02
 1c8:	08 c0       	rjmp	.+16     	; 0x1da <writehex8+0x42>
    {
        temp -= 16;
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	80 51       	subi	r24, 0x10	; 16
 1ce:	89 83       	std	Y+1, r24	; 0x01
void writehex8(unsigned char num)
{
    unsigned char temp = num;
    char hex[] = "0123456789ABCDEF";
    int i, ii;
    for(i = 0; temp >= 16; i++)
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	9b 81       	ldd	r25, Y+3	; 0x03
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	9b 83       	std	Y+3, r25	; 0x03
 1d8:	8a 83       	std	Y+2, r24	; 0x02
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	80 31       	cpi	r24, 0x10	; 16
 1de:	a8 f7       	brcc	.-22     	; 0x1ca <writehex8+0x32>
    {
        temp -= 16;
    }
    uart_writechar(hex[i]);
 1e0:	9e 01       	movw	r18, r28
 1e2:	2a 5f       	subi	r18, 0xFA	; 250
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	8a 81       	ldd	r24, Y+2	; 0x02
 1e8:	9b 81       	ldd	r25, Y+3	; 0x03
 1ea:	82 0f       	add	r24, r18
 1ec:	93 1f       	adc	r25, r19
 1ee:	fc 01       	movw	r30, r24
 1f0:	80 81       	ld	r24, Z
 1f2:	0e 94 ad 01 	call	0x35a	; 0x35a <uart_writechar>
    temp = num<<4;
 1f6:	8f 89       	ldd	r24, Y+23	; 0x17
 1f8:	82 95       	swap	r24
 1fa:	80 7f       	andi	r24, 0xF0	; 240
 1fc:	89 83       	std	Y+1, r24	; 0x01
    for(ii = 0; temp >= 16; ii++)
 1fe:	1d 82       	std	Y+5, r1	; 0x05
 200:	1c 82       	std	Y+4, r1	; 0x04
 202:	08 c0       	rjmp	.+16     	; 0x214 <writehex8+0x7c>
    {
        temp -= 16;
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	80 51       	subi	r24, 0x10	; 16
 208:	89 83       	std	Y+1, r24	; 0x01
    {
        temp -= 16;
    }
    uart_writechar(hex[i]);
    temp = num<<4;
    for(ii = 0; temp >= 16; ii++)
 20a:	8c 81       	ldd	r24, Y+4	; 0x04
 20c:	9d 81       	ldd	r25, Y+5	; 0x05
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	9d 83       	std	Y+5, r25	; 0x05
 212:	8c 83       	std	Y+4, r24	; 0x04
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	80 31       	cpi	r24, 0x10	; 16
 218:	a8 f7       	brcc	.-22     	; 0x204 <writehex8+0x6c>
    {
        temp -= 16;
    }
    uart_writechar(hex[ii]);
 21a:	9e 01       	movw	r18, r28
 21c:	2a 5f       	subi	r18, 0xFA	; 250
 21e:	3f 4f       	sbci	r19, 0xFF	; 255
 220:	8c 81       	ldd	r24, Y+4	; 0x04
 222:	9d 81       	ldd	r25, Y+5	; 0x05
 224:	82 0f       	add	r24, r18
 226:	93 1f       	adc	r25, r19
 228:	fc 01       	movw	r30, r24
 22a:	80 81       	ld	r24, Z
 22c:	0e 94 ad 01 	call	0x35a	; 0x35a <uart_writechar>
}
 230:	00 00       	nop
 232:	67 96       	adiw	r28, 0x17	; 23
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <writehex16>:
 *
 * changes:
 *   No direct state changes.
 */
void writehex16(unsigned int num)
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	00 d0       	rcall	.+0      	; 0x24a <writehex16+0x6>
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	9a 83       	std	Y+2, r25	; 0x02
 250:	89 83       	std	Y+1, r24	; 0x01
    writehex8(num>>8);
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	9a 81       	ldd	r25, Y+2	; 0x02
 256:	89 2f       	mov	r24, r25
 258:	99 27       	eor	r25, r25
 25a:	0e 94 cc 00 	call	0x198	; 0x198 <writehex8>
    writehex8(num);
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	0e 94 cc 00 	call	0x198	; 0x198 <writehex8>
}
 264:	00 00       	nop
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <blink_led>:
 * changes:
 *   The states of PINB and PORTB will be changed by
 *   this function.
 */
void blink_led(char *msg)
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	00 d0       	rcall	.+0      	; 0x276 <blink_led+0x6>
 276:	00 d0       	rcall	.+0      	; 0x278 <blink_led+0x8>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	9c 83       	std	Y+4, r25	; 0x04
 27e:	8b 83       	std	Y+3, r24	; 0x03
    PORTB |= 0x2;
 280:	84 e2       	ldi	r24, 0x24	; 36
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	24 e2       	ldi	r18, 0x24	; 36
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	f9 01       	movw	r30, r18
 28a:	20 81       	ld	r18, Z
 28c:	22 60       	ori	r18, 0x02	; 2
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
    int i = 0;
 292:	1a 82       	std	Y+2, r1	; 0x02
 294:	19 82       	std	Y+1, r1	; 0x01
            }
            i++;
        }
    }
    else{
        while(msg[i] != '\0'){
 296:	4b c0       	rjmp	.+150    	; 0x32e <blink_led+0xbe>
            if(msg[i] == '-'){
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	9a 81       	ldd	r25, Y+2	; 0x02
 29c:	2b 81       	ldd	r18, Y+3	; 0x03
 29e:	3c 81       	ldd	r19, Y+4	; 0x04
 2a0:	82 0f       	add	r24, r18
 2a2:	93 1f       	adc	r25, r19
 2a4:	fc 01       	movw	r30, r24
 2a6:	80 81       	ld	r24, Z
 2a8:	8d 32       	cpi	r24, 0x2D	; 45
 2aa:	91 f4       	brne	.+36     	; 0x2d0 <blink_led+0x60>
                PINB = 0x2;
 2ac:	83 e2       	ldi	r24, 0x23	; 35
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	22 e0       	ldi	r18, 0x02	; 2
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
                delay(40);
 2b6:	88 e2       	ldi	r24, 0x28	; 40
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 71 00 	call	0xe2	; 0xe2 <delay>
                PINB = 0x2;
 2be:	83 e2       	ldi	r24, 0x23	; 35
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	22 e0       	ldi	r18, 0x02	; 2
 2c4:	fc 01       	movw	r30, r24
 2c6:	20 83       	st	Z, r18
                delay(5);
 2c8:	85 e0       	ldi	r24, 0x05	; 5
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 71 00 	call	0xe2	; 0xe2 <delay>
            }
            if(msg[i] == '.'){
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
 2d2:	9a 81       	ldd	r25, Y+2	; 0x02
 2d4:	2b 81       	ldd	r18, Y+3	; 0x03
 2d6:	3c 81       	ldd	r19, Y+4	; 0x04
 2d8:	82 0f       	add	r24, r18
 2da:	93 1f       	adc	r25, r19
 2dc:	fc 01       	movw	r30, r24
 2de:	80 81       	ld	r24, Z
 2e0:	8e 32       	cpi	r24, 0x2E	; 46
 2e2:	91 f4       	brne	.+36     	; 0x308 <blink_led+0x98>
                PINB = 0x2;
 2e4:	83 e2       	ldi	r24, 0x23	; 35
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	22 e0       	ldi	r18, 0x02	; 2
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
                delay(15);
 2ee:	8f e0       	ldi	r24, 0x0F	; 15
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 71 00 	call	0xe2	; 0xe2 <delay>
                PINB = 0x2;
 2f6:	83 e2       	ldi	r24, 0x23	; 35
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	22 e0       	ldi	r18, 0x02	; 2
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
                delay(5);
 300:	85 e0       	ldi	r24, 0x05	; 5
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 71 00 	call	0xe2	; 0xe2 <delay>
            }
            if(msg[i] == ' '){
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	9a 81       	ldd	r25, Y+2	; 0x02
 30c:	2b 81       	ldd	r18, Y+3	; 0x03
 30e:	3c 81       	ldd	r19, Y+4	; 0x04
 310:	82 0f       	add	r24, r18
 312:	93 1f       	adc	r25, r19
 314:	fc 01       	movw	r30, r24
 316:	80 81       	ld	r24, Z
 318:	80 32       	cpi	r24, 0x20	; 32
 31a:	21 f4       	brne	.+8      	; 0x324 <blink_led+0xb4>
                delay(50);
 31c:	82 e3       	ldi	r24, 0x32	; 50
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 71 00 	call	0xe2	; 0xe2 <delay>
            }
            i++;
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	9a 81       	ldd	r25, Y+2	; 0x02
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	9a 83       	std	Y+2, r25	; 0x02
 32c:	89 83       	std	Y+1, r24	; 0x01
            }
            i++;
        }
    }
    else{
        while(msg[i] != '\0'){
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	9a 81       	ldd	r25, Y+2	; 0x02
 332:	2b 81       	ldd	r18, Y+3	; 0x03
 334:	3c 81       	ldd	r19, Y+4	; 0x04
 336:	82 0f       	add	r24, r18
 338:	93 1f       	adc	r25, r19
 33a:	fc 01       	movw	r30, r24
 33c:	80 81       	ld	r24, Z
 33e:	88 23       	and	r24, r24
 340:	09 f0       	breq	.+2      	; 0x344 <blink_led+0xd4>
 342:	aa cf       	rjmp	.-172    	; 0x298 <blink_led+0x28>
                delay(50);
            }
            i++;
        }
    }
}
 344:	00 00       	nop
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <uart_init>:
 354:	03 d0       	rcall	.+6      	; 0x35c <serial_init>
 356:	78 94       	sei
 358:	08 95       	ret

0000035a <uart_writechar>:
 35a:	98 c0       	rjmp	.+304    	; 0x48c <serial_writechar>

0000035c <serial_init>:
 35c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 360:	83 e3       	ldi	r24, 0x33	; 51
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 368:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 36c:	e1 ec       	ldi	r30, 0xC1	; 193
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	88 e1       	ldi	r24, 0x18	; 24
 372:	80 83       	st	Z, r24
 374:	86 e0       	ldi	r24, 0x06	; 6
 376:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 37a:	80 81       	ld	r24, Z
 37c:	80 6a       	ori	r24, 0xA0	; 160
 37e:	80 83       	st	Z, r24
 380:	08 95       	ret

00000382 <__vector_18>:
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	11 24       	eor	r1, r1
 38c:	2f 93       	push	r18
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	ef 93       	push	r30
 394:	ff 93       	push	r31
 396:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <rxtail>
 39a:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <rxhead>
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	82 1b       	sub	r24, r18
 3a2:	91 09       	sbc	r25, r1
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	8f 73       	andi	r24, 0x3F	; 63
 3a8:	99 27       	eor	r25, r25
 3aa:	89 2b       	or	r24, r25
 3ac:	79 f0       	breq	.+30     	; 0x3cc <__vector_18+0x4a>
 3ae:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <rxhead>
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3b8:	e2 5c       	subi	r30, 0xC2	; 194
 3ba:	fe 4f       	sbci	r31, 0xFE	; 254
 3bc:	80 83       	st	Z, r24
 3be:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <rxhead>
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	8f 73       	andi	r24, 0x3F	; 63
 3c6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <rxhead>
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <__vector_18+0x4e>
 3cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3d0:	ff 91       	pop	r31
 3d2:	ef 91       	pop	r30
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__vector_19>:
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	2f 93       	push	r18
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
 3f8:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <txhead>
 3fc:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	82 1b       	sub	r24, r18
 404:	91 09       	sbc	r25, r1
 406:	8f 73       	andi	r24, 0x3F	; 63
 408:	99 27       	eor	r25, r25
 40a:	89 2b       	or	r24, r25
 40c:	79 f0       	breq	.+30     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 40e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__data_end>
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	e2 58       	subi	r30, 0x82	; 130
 416:	fe 4f       	sbci	r31, 0xFE	; 254
 418:	80 81       	ld	r24, Z
 41a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 41e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 422:	8f 5f       	subi	r24, 0xFF	; 255
 424:	8f 73       	andi	r24, 0x3F	; 63
 426:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
 42a:	05 c0       	rjmp	.+10     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 430:	8f 7d       	andi	r24, 0xDF	; 223
 432:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	2f 91       	pop	r18
 440:	0f 90       	pop	r0
 442:	0f be       	out	0x3f, r0	; 63
 444:	0f 90       	pop	r0
 446:	1f 90       	pop	r1
 448:	18 95       	reti

0000044a <serial_rxchars>:
 44a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <rxhead>
 44e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <rxtail>
 452:	89 1b       	sub	r24, r25
 454:	8f 73       	andi	r24, 0x3F	; 63
 456:	08 95       	ret

00000458 <serial_popchar>:
 458:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <rxhead>
 45c:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <rxtail>
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	82 1b       	sub	r24, r18
 464:	91 09       	sbc	r25, r1
 466:	8f 73       	andi	r24, 0x3F	; 63
 468:	99 27       	eor	r25, r25
 46a:	89 2b       	or	r24, r25
 46c:	69 f0       	breq	.+26     	; 0x488 <serial_popchar+0x30>
 46e:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <rxtail>
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	e2 5c       	subi	r30, 0xC2	; 194
 476:	fe 4f       	sbci	r31, 0xFE	; 254
 478:	80 81       	ld	r24, Z
 47a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <rxtail>
 47e:	9f 5f       	subi	r25, 0xFF	; 255
 480:	9f 73       	andi	r25, 0x3F	; 63
 482:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <rxtail>
 486:	08 95       	ret
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	08 95       	ret

0000048c <serial_writechar>:
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	07 fe       	sbrs	r0, 7
 490:	0e c0       	rjmp	.+28     	; 0x4ae <serial_writechar+0x22>
 492:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
 496:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <txhead>
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	29 1b       	sub	r18, r25
 49e:	31 09       	sbc	r19, r1
 4a0:	21 50       	subi	r18, 0x01	; 1
 4a2:	31 09       	sbc	r19, r1
 4a4:	2f 73       	andi	r18, 0x3F	; 63
 4a6:	33 27       	eor	r19, r19
 4a8:	23 2b       	or	r18, r19
 4aa:	99 f3       	breq	.-26     	; 0x492 <serial_writechar+0x6>
 4ac:	0d c0       	rjmp	.+26     	; 0x4c8 <serial_writechar+0x3c>
 4ae:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
 4b2:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <txhead>
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	29 1b       	sub	r18, r25
 4ba:	31 09       	sbc	r19, r1
 4bc:	21 50       	subi	r18, 0x01	; 1
 4be:	31 09       	sbc	r19, r1
 4c0:	2f 73       	andi	r18, 0x3F	; 63
 4c2:	33 27       	eor	r19, r19
 4c4:	23 2b       	or	r18, r19
 4c6:	61 f0       	breq	.+24     	; 0x4e0 <serial_writechar+0x54>
 4c8:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <txhead>
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	e2 58       	subi	r30, 0x82	; 130
 4d0:	fe 4f       	sbci	r31, 0xFE	; 254
 4d2:	80 83       	st	Z, r24
 4d4:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <txhead>
 4d8:	8f 5f       	subi	r24, 0xFF	; 255
 4da:	8f 73       	andi	r24, 0x3F	; 63
 4dc:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <txhead>
 4e0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4e4:	80 62       	ori	r24, 0x20	; 32
 4e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4ea:	08 95       	ret

000004ec <serial_writestr>:
 4ec:	1f 93       	push	r17
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	c8 2f       	mov	r28, r24
 4f4:	d9 2f       	mov	r29, r25
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	11 e0       	ldi	r17, 0x01	; 1
 4fa:	19 0f       	add	r17, r25
 4fc:	ec 2f       	mov	r30, r28
 4fe:	fd 2f       	mov	r31, r29
 500:	e9 0f       	add	r30, r25
 502:	f1 1d       	adc	r31, r1
 504:	80 81       	ld	r24, Z
 506:	88 23       	and	r24, r24
 508:	19 f0       	breq	.+6      	; 0x510 <serial_writestr+0x24>
 50a:	c0 df       	rcall	.-128    	; 0x48c <serial_writechar>
 50c:	91 2f       	mov	r25, r17
 50e:	f4 cf       	rjmp	.-24     	; 0x4f8 <serial_writestr+0xc>
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	08 95       	ret

00000518 <serial_writestr_P>:
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	c8 2f       	mov	r28, r24
 520:	d9 2f       	mov	r29, r25
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	11 e0       	ldi	r17, 0x01	; 1
 526:	19 0f       	add	r17, r25
 528:	ec 2f       	mov	r30, r28
 52a:	fd 2f       	mov	r31, r29
 52c:	e9 0f       	add	r30, r25
 52e:	f1 1d       	adc	r31, r1
 530:	c8 95       	lpm
 532:	80 2d       	mov	r24, r0
 534:	88 23       	and	r24, r24
 536:	19 f0       	breq	.+6      	; 0x53e <serial_writestr_P+0x26>
 538:	a9 df       	rcall	.-174    	; 0x48c <serial_writechar>
 53a:	91 2f       	mov	r25, r17
 53c:	f3 cf       	rjmp	.-26     	; 0x524 <serial_writestr_P+0xc>
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	08 95       	ret

00000546 <_exit>:
 546:	f8 94       	cli

00000548 <__stop_program>:
 548:	ff cf       	rjmp	.-2      	; 0x548 <__stop_program>
