
bin/Debug/homework4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000aa6  00000b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  00000a7e  00000a7e  00000b12  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000087  0080012a  0080012a  00000b64  2**0
                  ALLOC
  4 .stab         00000804  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000008f2  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c6c  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00002842  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_18>
  4c:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3b       	cpi	r26, 0xB1	; 177
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 *   No direct state changes.
 *
 * NOTE: Return statement unreachable, so it is not used.
 */
int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
    //init led
    led_init();
  ae:	0e 94 8d 02 	call	0x51a	; 0x51a <led_init>
    //init uart
    uart_init();
  b2:	0e 94 46 01 	call	0x28c	; 0x28c <uart_init>
    //init temp
    temp_init();
  b6:	0e 94 77 00 	call	0xee	; 0xee <temp_init>
    //use uart to output class, hw4, name
    uart_writestr("SER 486 HW4 â€“ Andrew Goodman\n\r");
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 4c 01 	call	0x298	; 0x298 <uart_writestr>
    //infinite loop to display temp every sec
    while(1){
        if(RELEASE_FLAG)
            delay(1000);
        else
            delay(75);
  c2:	8b e4       	ldi	r24, 0x4B	; 75
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 64 02 	call	0x4c8	; 0x4c8 <delay>
        temp_start();
  ca:	0e 94 df 00 	call	0x1be	; 0x1be <temp_start>
        temp_is_data_ready();
  ce:	0e 94 ba 00 	call	0x174	; 0x174 <temp_is_data_ready>
        uart_writedec32((unsigned int) temp_get());
  d2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <temp_get>
  d6:	cc 01       	movw	r24, r24
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	bc 01       	movw	r22, r24
  de:	cd 01       	movw	r24, r26
  e0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <uart_writedec32>
        uart_writestr("\n\r");
  e4:	83 e2       	ldi	r24, 0x23	; 35
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 4c 01 	call	0x298	; 0x298 <uart_writestr>
    }
  ec:	ea cf       	rjmp	.-44     	; 0xc2 <main+0x1c>

000000ee <temp_init>:
 *   ****update later****
 *
 * NOTE: ****update later****
 */
void temp_init()
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
    //set ADCSRA::ADEN to enable ADC and clear remaining bits
    ADCSRA = 0x80;      //10000000
  f6:	8a e7       	ldi	r24, 0x7A	; 122
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	20 e8       	ldi	r18, 0x80	; 128
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
    //set ADCSRA::ADPS[2:0] for divisor of 64
    ADCSRA |= 0x6;      //10000110
 100:	8a e7       	ldi	r24, 0x7A	; 122
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	2a e7       	ldi	r18, 0x7A	; 122
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	26 60       	ori	r18, 0x06	; 6
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
    //set ADMUX::REGS[1:0] to select internal 1.1V voltage reference
    ADMUX |= 0xC0;      //11bbbbbb
 112:	8c e7       	ldi	r24, 0x7C	; 124
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	2c e7       	ldi	r18, 0x7C	; 124
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	20 6c       	ori	r18, 0xC0	; 192
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
    //clear ADMUX::ADLAR
    ADMUX &= (~(1<<5)); //110bbbbb
 124:	8c e7       	ldi	r24, 0x7C	; 124
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	2c e7       	ldi	r18, 0x7C	; 124
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	2f 7d       	andi	r18, 0xDF	; 223
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
    //set ADMUX::MUX[3:0] to 1000b (0x8) to select temp sensor from input channel
    ADMUX |= 0x8;       //110b1bbb
 136:	8c e7       	ldi	r24, 0x7C	; 124
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2c e7       	ldi	r18, 0x7C	; 124
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	20 81       	ld	r18, Z
 142:	28 60       	ori	r18, 0x08	; 8
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
    ADMUX |= (~(0x7));  //110b1000
 148:	8c e7       	ldi	r24, 0x7C	; 124
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	2c e7       	ldi	r18, 0x7C	; 124
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	20 81       	ld	r18, Z
 154:	28 6f       	ori	r18, 0xF8	; 248
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
    ADMUX &= (~(0x20));
 15a:	8c e7       	ldi	r24, 0x7C	; 124
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2c e7       	ldi	r18, 0x7C	; 124
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	f9 01       	movw	r30, r18
 164:	20 81       	ld	r18, Z
 166:	2f 7d       	andi	r18, 0xDF	; 223
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
}
 16c:	00 00       	nop
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <temp_is_data_ready>:
 *   ****update later****
 *
 * NOTE: ****update later****
 */
unsigned int temp_is_data_ready()
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	00 d0       	rcall	.+0      	; 0x17a <temp_is_data_ready+0x6>
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
    //poll ADSC until it reads 0 (conversion complete)
    unsigned int i = ADCSRA & 0x40;
 17e:	8a e7       	ldi	r24, 0x7A	; 122
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fc 01       	movw	r30, r24
 184:	80 81       	ld	r24, Z
 186:	88 2f       	mov	r24, r24
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	80 74       	andi	r24, 0x40	; 64
 18c:	99 27       	eor	r25, r25
 18e:	9a 83       	std	Y+2, r25	; 0x02
 190:	89 83       	std	Y+1, r24	; 0x01
    while(i != 0)
 192:	0a c0       	rjmp	.+20     	; 0x1a8 <temp_is_data_ready+0x34>
        i = ADCSRA & 0x40; //bit 6
 194:	8a e7       	ldi	r24, 0x7A	; 122
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	80 81       	ld	r24, Z
 19c:	88 2f       	mov	r24, r24
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	80 74       	andi	r24, 0x40	; 64
 1a2:	99 27       	eor	r25, r25
 1a4:	9a 83       	std	Y+2, r25	; 0x02
 1a6:	89 83       	std	Y+1, r24	; 0x01
 */
unsigned int temp_is_data_ready()
{
    //poll ADSC until it reads 0 (conversion complete)
    unsigned int i = ADCSRA & 0x40;
    while(i != 0)
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	9a 81       	ldd	r25, Y+2	; 0x02
 1ac:	89 2b       	or	r24, r25
 1ae:	91 f7       	brne	.-28     	; 0x194 <temp_is_data_ready+0x20>
        i = ADCSRA & 0x40; //bit 6
    return i;
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	9a 81       	ldd	r25, Y+2	; 0x02
}
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <temp_start>:
 *   ****update later****
 *
 * NOTE: ****update later****
 */
void temp_start()
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
    ////set ADCSRA::ADSC to start conversion
    ADCSRA |= 0x40;     //b1bbbbbb
 1c6:	8a e7       	ldi	r24, 0x7A	; 122
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	2a e7       	ldi	r18, 0x7A	; 122
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	f9 01       	movw	r30, r18
 1d0:	20 81       	ld	r18, Z
 1d2:	20 64       	ori	r18, 0x40	; 64
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
}
 1d8:	00 00       	nop
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <temp_get>:
 *
 * changes:
 *   No direct state changes.
 */
signed int temp_get()
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	2c 97       	sbiw	r28, 0x0c	; 12
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
    //read ADCL, then ADCH for results/to update ADC (gets 10 bit value, convert to 16 bits)
    signed long int adcl = ADCL;
 1f4:	88 e7       	ldi	r24, 0x78	; 120
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	fc 01       	movw	r30, r24
 1fa:	80 81       	ld	r24, Z
 1fc:	88 2f       	mov	r24, r24
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	a0 e0       	ldi	r26, 0x00	; 0
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	9a 83       	std	Y+2, r25	; 0x02
 208:	ab 83       	std	Y+3, r26	; 0x03
 20a:	bc 83       	std	Y+4, r27	; 0x04
    signed long int adch = ADCH;
 20c:	89 e7       	ldi	r24, 0x79	; 121
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	80 81       	ld	r24, Z
 214:	88 2f       	mov	r24, r24
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	a0 e0       	ldi	r26, 0x00	; 0
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	8d 83       	std	Y+5, r24	; 0x05
 21e:	9e 83       	std	Y+6, r25	; 0x06
 220:	af 83       	std	Y+7, r26	; 0x07
 222:	b8 87       	std	Y+8, r27	; 0x08
    signed long int reading = (adch<<8) | adcl;
 224:	8d 81       	ldd	r24, Y+5	; 0x05
 226:	9e 81       	ldd	r25, Y+6	; 0x06
 228:	af 81       	ldd	r26, Y+7	; 0x07
 22a:	b8 85       	ldd	r27, Y+8	; 0x08
 22c:	22 27       	eor	r18, r18
 22e:	38 2f       	mov	r19, r24
 230:	49 2f       	mov	r20, r25
 232:	5a 2f       	mov	r21, r26
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	9a 81       	ldd	r25, Y+2	; 0x02
 238:	ab 81       	ldd	r26, Y+3	; 0x03
 23a:	bc 81       	ldd	r27, Y+4	; 0x04
 23c:	82 2b       	or	r24, r18
 23e:	93 2b       	or	r25, r19
 240:	a4 2b       	or	r26, r20
 242:	b5 2b       	or	r27, r21
 244:	89 87       	std	Y+9, r24	; 0x09
 246:	9a 87       	std	Y+10, r25	; 0x0a
 248:	ab 87       	std	Y+11, r26	; 0x0b
 24a:	bc 87       	std	Y+12, r27	; 0x0c
    return (signed int) DEGREES(reading);
 24c:	29 85       	ldd	r18, Y+9	; 0x09
 24e:	3a 85       	ldd	r19, Y+10	; 0x0a
 250:	4b 85       	ldd	r20, Y+11	; 0x0b
 252:	5c 85       	ldd	r21, Y+12	; 0x0c
 254:	85 e6       	ldi	r24, 0x65	; 101
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	dc 01       	movw	r26, r24
 25a:	0e 94 01 05 	call	0xa02	; 0xa02 <__muluhisi3>
 25e:	dc 01       	movw	r26, r24
 260:	cb 01       	movw	r24, r22
 262:	24 e6       	ldi	r18, 0x64	; 100
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	bc 01       	movw	r22, r24
 26c:	cd 01       	movw	r24, r26
 26e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divmodsi4>
 272:	da 01       	movw	r26, r20
 274:	c9 01       	movw	r24, r18
 276:	81 51       	subi	r24, 0x11	; 17
 278:	91 40       	sbci	r25, 0x01	; 1
}
 27a:	2c 96       	adiw	r28, 0x0c	; 12
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <uart_init>:
 28c:	0e 94 c4 02 	call	0x588	; 0x588 <serial_init>
 290:	78 94       	sei
 292:	08 95       	ret

00000294 <uart_writechar>:
 294:	0c 94 88 04 	jmp	0x910	; 0x910 <serial_writechar>

00000298 <uart_writestr>:
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ec 01       	movw	r28, r24
 29e:	89 91       	ld	r24, Y+
 2a0:	88 23       	and	r24, r24
 2a2:	19 f0       	breq	.+6      	; 0x2aa <uart_writestr+0x12>
 2a4:	0e 94 88 04 	call	0x910	; 0x910 <serial_writechar>
 2a8:	fa cf       	rjmp	.-12     	; 0x29e <uart_writestr+0x6>
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <uart_writehex8>:
 2b0:	cf 93       	push	r28
 2b2:	c8 2f       	mov	r28, r24
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	24 e0       	ldi	r18, 0x04	; 4
 2b8:	95 95       	asr	r25
 2ba:	87 95       	ror	r24
 2bc:	2a 95       	dec	r18
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <uart_writehex8+0x8>
 2c0:	8a 30       	cpi	r24, 0x0A	; 10
 2c2:	10 f4       	brcc	.+4      	; 0x2c8 <uart_writehex8+0x18>
 2c4:	80 5d       	subi	r24, 0xD0	; 208
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <uart_writehex8+0x1a>
 2c8:	89 5c       	subi	r24, 0xC9	; 201
 2ca:	0e 94 88 04 	call	0x910	; 0x910 <serial_writechar>
 2ce:	8c 2f       	mov	r24, r28
 2d0:	8f 70       	andi	r24, 0x0F	; 15
 2d2:	8a 30       	cpi	r24, 0x0A	; 10
 2d4:	10 f0       	brcs	.+4      	; 0x2da <uart_writehex8+0x2a>
 2d6:	89 5c       	subi	r24, 0xC9	; 201
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <uart_writehex8+0x2c>
 2da:	80 5d       	subi	r24, 0xD0	; 208
 2dc:	cf 91       	pop	r28
 2de:	0c 94 88 04 	jmp	0x910	; 0x910 <serial_writechar>

000002e2 <uart_writehex16>:
 2e2:	cf 93       	push	r28
 2e4:	c8 2f       	mov	r28, r24
 2e6:	89 2f       	mov	r24, r25
 2e8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <uart_writehex8>
 2ec:	8c 2f       	mov	r24, r28
 2ee:	cf 91       	pop	r28
 2f0:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <uart_writehex8>

000002f4 <uart_writedec32>:
 2f4:	2f 92       	push	r2
 2f6:	3f 92       	push	r3
 2f8:	4f 92       	push	r4
 2fa:	5f 92       	push	r5
 2fc:	6f 92       	push	r6
 2fe:	7f 92       	push	r7
 300:	8f 92       	push	r8
 302:	9f 92       	push	r9
 304:	af 92       	push	r10
 306:	bf 92       	push	r11
 308:	cf 92       	push	r12
 30a:	df 92       	push	r13
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	63 97       	sbiw	r28, 0x13	; 19
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	6b 01       	movw	r12, r22
 32a:	7c 01       	movw	r14, r24
 32c:	97 ff       	sbrs	r25, 7
 32e:	0d c0       	rjmp	.+26     	; 0x34a <uart_writedec32+0x56>
 330:	f0 94       	com	r15
 332:	e0 94       	com	r14
 334:	d0 94       	com	r13
 336:	c0 94       	com	r12
 338:	c1 1c       	adc	r12, r1
 33a:	d1 1c       	adc	r13, r1
 33c:	e1 1c       	adc	r14, r1
 33e:	f1 1c       	adc	r15, r1
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	9b 8b       	std	Y+19, r25	; 0x13
 346:	8a 8b       	std	Y+18, r24	; 0x12
 348:	02 c0       	rjmp	.+4      	; 0x34e <uart_writedec32+0x5a>
 34a:	1b 8a       	std	Y+19, r1	; 0x13
 34c:	1a 8a       	std	Y+18, r1	; 0x12
 34e:	fe 01       	movw	r30, r28
 350:	31 96       	adiw	r30, 0x01	; 1
 352:	5f 01       	movw	r10, r30
 354:	8e 01       	movw	r16, r28
 356:	05 5f       	subi	r16, 0xF5	; 245
 358:	1f 4f       	sbci	r17, 0xFF	; 255
 35a:	f9 8b       	std	Y+17, r31	; 0x11
 35c:	e8 8b       	std	Y+16, r30	; 0x10
 35e:	66 24       	eor	r6, r6
 360:	63 94       	inc	r6
 362:	71 2c       	mov	r7, r1
 364:	81 2c       	mov	r8, r1
 366:	91 2c       	mov	r9, r1
 368:	aa e0       	ldi	r26, 0x0A	; 10
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	93 01       	movw	r18, r6
 36e:	a4 01       	movw	r20, r8
 370:	0e 94 01 05 	call	0xa02	; 0xa02 <__muluhisi3>
 374:	1b 01       	movw	r2, r22
 376:	2c 01       	movw	r4, r24
 378:	c7 01       	movw	r24, r14
 37a:	b6 01       	movw	r22, r12
 37c:	91 01       	movw	r18, r2
 37e:	a2 01       	movw	r20, r4
 380:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divmodsi4>
 384:	93 01       	movw	r18, r6
 386:	a4 01       	movw	r20, r8
 388:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divmodsi4>
 38c:	e8 89       	ldd	r30, Y+16	; 0x10
 38e:	f9 89       	ldd	r31, Y+17	; 0x11
 390:	21 93       	st	Z+, r18
 392:	f9 8b       	std	Y+17, r31	; 0x11
 394:	e8 8b       	std	Y+16, r30	; 0x10
 396:	82 2f       	mov	r24, r18
 398:	22 0f       	add	r18, r18
 39a:	99 0b       	sbc	r25, r25
 39c:	aa 0b       	sbc	r26, r26
 39e:	bb 0b       	sbc	r27, r27
 3a0:	c8 1a       	sub	r12, r24
 3a2:	d9 0a       	sbc	r13, r25
 3a4:	ea 0a       	sbc	r14, r26
 3a6:	fb 0a       	sbc	r15, r27
 3a8:	31 01       	movw	r6, r2
 3aa:	42 01       	movw	r8, r4
 3ac:	0e 17       	cp	r16, r30
 3ae:	1f 07       	cpc	r17, r31
 3b0:	d9 f6       	brne	.-74     	; 0x368 <uart_writedec32+0x74>
 3b2:	8a 89       	ldd	r24, Y+18	; 0x12
 3b4:	9b 89       	ldd	r25, Y+19	; 0x13
 3b6:	89 2b       	or	r24, r25
 3b8:	19 f0       	breq	.+6      	; 0x3c0 <uart_writedec32+0xcc>
 3ba:	8d e2       	ldi	r24, 0x2D	; 45
 3bc:	0e 94 88 04 	call	0x910	; 0x910 <serial_writechar>
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	f8 01       	movw	r30, r16
 3c6:	82 91       	ld	r24, -Z
 3c8:	8f 01       	movw	r16, r30
 3ca:	81 11       	cpse	r24, r1
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <uart_writedec32+0xe6>
 3ce:	21 15       	cp	r18, r1
 3d0:	31 05       	cpc	r19, r1
 3d2:	19 f4       	brne	.+6      	; 0x3da <uart_writedec32+0xe6>
 3d4:	ea 15       	cp	r30, r10
 3d6:	fb 05       	cpc	r31, r11
 3d8:	29 f4       	brne	.+10     	; 0x3e4 <uart_writedec32+0xf0>
 3da:	80 5d       	subi	r24, 0xD0	; 208
 3dc:	0e 94 88 04 	call	0x910	; 0x910 <serial_writechar>
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	0a 15       	cp	r16, r10
 3e6:	1b 05       	cpc	r17, r11
 3e8:	69 f7       	brne	.-38     	; 0x3c4 <uart_writedec32+0xd0>
 3ea:	63 96       	adiw	r28, 0x13	; 19
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	f8 94       	cli
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	cd bf       	out	0x3d, r28	; 61
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	bf 90       	pop	r11
 408:	af 90       	pop	r10
 40a:	9f 90       	pop	r9
 40c:	8f 90       	pop	r8
 40e:	7f 90       	pop	r7
 410:	6f 90       	pop	r6
 412:	5f 90       	pop	r5
 414:	4f 90       	pop	r4
 416:	3f 90       	pop	r3
 418:	2f 90       	pop	r2
 41a:	08 95       	ret

0000041c <uart_is_connected>:
 41c:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <serial_isconnected>

00000420 <uart_is_packet_available>:
 420:	0c 94 85 04 	jmp	0x90a	; 0x90a <serial_is_packet_ready>

00000424 <uart_readpacket>:
 424:	ff 92       	push	r15
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	ec 01       	movw	r28, r24
 430:	06 2f       	mov	r16, r22
 432:	f7 2e       	mov	r15, r23
 434:	18 82       	st	Y, r1
 436:	0e 94 5e 04 	call	0x8bc	; 0x8bc <serial_isconnected>
 43a:	10 e0       	ldi	r17, 0x00	; 0
 43c:	88 23       	and	r24, r24
 43e:	d9 f0       	breq	.+54     	; 0x476 <uart_readpacket+0x52>
 440:	0e 94 32 04 	call	0x864	; 0x864 <serial_rxchars>
 444:	88 23       	and	r24, r24
 446:	b9 f0       	breq	.+46     	; 0x476 <uart_readpacket+0x52>
 448:	0e 94 39 04 	call	0x872	; 0x872 <serial_popchar>
 44c:	80 32       	cpi	r24, 0x20	; 32
 44e:	10 f0       	brcs	.+4      	; 0x454 <uart_readpacket+0x30>
 450:	89 93       	st	Y+, r24
 452:	1f 5f       	subi	r17, 0xFF	; 255
 454:	e0 2f       	mov	r30, r16
 456:	ff 2d       	mov	r31, r15
 458:	48 2f       	mov	r20, r24
 45a:	50 e0       	ldi	r21, 0x00	; 0
 45c:	21 91       	ld	r18, Z+
 45e:	22 23       	and	r18, r18
 460:	39 f0       	breq	.+14     	; 0x470 <uart_readpacket+0x4c>
 462:	02 2e       	mov	r0, r18
 464:	00 0c       	add	r0, r0
 466:	33 0b       	sbc	r19, r19
 468:	42 17       	cp	r20, r18
 46a:	53 07       	cpc	r21, r19
 46c:	b9 f7       	brne	.-18     	; 0x45c <uart_readpacket+0x38>
 46e:	02 c0       	rjmp	.+4      	; 0x474 <uart_readpacket+0x50>
 470:	8d 30       	cpi	r24, 0x0D	; 13
 472:	51 f7       	brne	.-44     	; 0x448 <uart_readpacket+0x24>
 474:	18 82       	st	Y, r1
 476:	81 2f       	mov	r24, r17
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	08 95       	ret

00000484 <uart_writeip>:
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	8c 01       	movw	r16, r24
 48e:	ec 01       	movw	r28, r24
 490:	69 91       	ld	r22, Y+
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <uart_writedec32>
 49c:	0c 5f       	subi	r16, 0xFC	; 252
 49e:	1f 4f       	sbci	r17, 0xFF	; 255
 4a0:	8e e2       	ldi	r24, 0x2E	; 46
 4a2:	0e 94 88 04 	call	0x910	; 0x910 <serial_writechar>
 4a6:	69 91       	ld	r22, Y+
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <uart_writedec32>
 4b2:	c0 17       	cp	r28, r16
 4b4:	d1 07       	cpc	r29, r17
 4b6:	a1 f7       	brne	.-24     	; 0x4a0 <uart_writeip+0x1c>
 4b8:	86 e2       	ldi	r24, 0x26	; 38
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	0c 94 4c 01 	jmp	0x298	; 0x298 <uart_writestr>

000004c8 <delay>:
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	00 d0       	rcall	.+0      	; 0x4ce <delay+0x6>
 4ce:	00 d0       	rcall	.+0      	; 0x4d0 <delay+0x8>
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	1c 82       	std	Y+4, r1	; 0x04
 4d6:	1b 82       	std	Y+3, r1	; 0x03
 4d8:	2b 81       	ldd	r18, Y+3	; 0x03
 4da:	3c 81       	ldd	r19, Y+4	; 0x04
 4dc:	28 17       	cp	r18, r24
 4de:	39 07       	cpc	r19, r25
 4e0:	a8 f4       	brcc	.+42     	; 0x50c <delay+0x44>
 4e2:	1a 82       	std	Y+2, r1	; 0x02
 4e4:	19 82       	std	Y+1, r1	; 0x01
 4e6:	29 81       	ldd	r18, Y+1	; 0x01
 4e8:	3a 81       	ldd	r19, Y+2	; 0x02
 4ea:	28 3e       	cpi	r18, 0xE8	; 232
 4ec:	33 40       	sbci	r19, 0x03	; 3
 4ee:	38 f4       	brcc	.+14     	; 0x4fe <delay+0x36>
 4f0:	29 81       	ldd	r18, Y+1	; 0x01
 4f2:	3a 81       	ldd	r19, Y+2	; 0x02
 4f4:	2f 5f       	subi	r18, 0xFF	; 255
 4f6:	3f 4f       	sbci	r19, 0xFF	; 255
 4f8:	3a 83       	std	Y+2, r19	; 0x02
 4fa:	29 83       	std	Y+1, r18	; 0x01
 4fc:	f4 cf       	rjmp	.-24     	; 0x4e6 <delay+0x1e>
 4fe:	2b 81       	ldd	r18, Y+3	; 0x03
 500:	3c 81       	ldd	r19, Y+4	; 0x04
 502:	2f 5f       	subi	r18, 0xFF	; 255
 504:	3f 4f       	sbci	r19, 0xFF	; 255
 506:	3c 83       	std	Y+4, r19	; 0x04
 508:	2b 83       	std	Y+3, r18	; 0x03
 50a:	e6 cf       	rjmp	.-52     	; 0x4d8 <delay+0x10>
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <led_init>:
 51a:	21 9a       	sbi	0x04, 1	; 4
 51c:	29 98       	cbi	0x05, 1	; 5
 51e:	08 95       	ret

00000520 <led_on>:
 520:	29 9a       	sbi	0x05, 1	; 5
 522:	08 95       	ret

00000524 <led_off>:
 524:	29 98       	cbi	0x05, 1	; 5
 526:	08 95       	ret

00000528 <led_ison>:
 528:	85 b1       	in	r24, 0x05	; 5
 52a:	86 95       	lsr	r24
 52c:	81 70       	andi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	08 95       	ret

00000532 <led_blink>:
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	8c 01       	movw	r16, r24
 53c:	0e 94 92 02 	call	0x524	; 0x524 <led_off>
 540:	e8 01       	movw	r28, r16
 542:	89 91       	ld	r24, Y+
 544:	88 23       	and	r24, r24
 546:	d9 f0       	breq	.+54     	; 0x57e <led_blink+0x4c>
 548:	8e 32       	cpi	r24, 0x2E	; 46
 54a:	29 f4       	brne	.+10     	; 0x556 <led_blink+0x24>
 54c:	0e 94 90 02 	call	0x520	; 0x520 <led_on>
 550:	8a ef       	ldi	r24, 0xFA	; 250
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	06 c0       	rjmp	.+12     	; 0x562 <led_blink+0x30>
 556:	8d 32       	cpi	r24, 0x2D	; 45
 558:	59 f4       	brne	.+22     	; 0x570 <led_blink+0x3e>
 55a:	0e 94 90 02 	call	0x520	; 0x520 <led_on>
 55e:	8e ee       	ldi	r24, 0xEE	; 238
 560:	92 e0       	ldi	r25, 0x02	; 2
 562:	0e 94 64 02 	call	0x4c8	; 0x4c8 <delay>
 566:	0e 94 92 02 	call	0x524	; 0x524 <led_off>
 56a:	84 e6       	ldi	r24, 0x64	; 100
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	04 c0       	rjmp	.+8      	; 0x578 <led_blink+0x46>
 570:	80 32       	cpi	r24, 0x20	; 32
 572:	39 f7       	brne	.-50     	; 0x542 <led_blink+0x10>
 574:	88 ee       	ldi	r24, 0xE8	; 232
 576:	93 e0       	ldi	r25, 0x03	; 3
 578:	0e 94 64 02 	call	0x4c8	; 0x4c8 <delay>
 57c:	e2 cf       	rjmp	.-60     	; 0x542 <led_blink+0x10>
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	08 95       	ret

00000588 <serial_init>:
 588:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 58c:	87 e6       	ldi	r24, 0x67	; 103
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 594:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 598:	e1 ec       	ldi	r30, 0xC1	; 193
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	88 e1       	ldi	r24, 0x18	; 24
 59e:	80 83       	st	Z, r24
 5a0:	86 e0       	ldi	r24, 0x06	; 6
 5a2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 5a6:	80 81       	ld	r24, Z
 5a8:	80 6a       	ori	r24, 0xA0	; 160
 5aa:	80 83       	st	Z, r24
 5ac:	08 95       	ret

000005ae <__vector_18>:
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
 5c4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <socket_mode>
 5c8:	88 23       	and	r24, r24
 5ca:	09 f4       	brne	.+2      	; 0x5ce <__vector_18+0x20>
 5cc:	f0 c0       	rjmp	.+480    	; 0x7ae <__vector_18+0x200>
 5ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5d2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <socket_connected>
 5d6:	99 23       	and	r25, r25
 5d8:	09 f4       	brne	.+2      	; 0x5dc <__vector_18+0x2e>
 5da:	e3 c0       	rjmp	.+454    	; 0x7a2 <__vector_18+0x1f4>
 5dc:	90 ee       	ldi	r25, 0xE0	; 224
 5de:	98 0f       	add	r25, r24
 5e0:	9f 35       	cpi	r25, 0x5F	; 95
 5e2:	18 f0       	brcs	.+6      	; 0x5ea <__vector_18+0x3c>
 5e4:	8d 30       	cpi	r24, 0x0D	; 13
 5e6:	09 f0       	breq	.+2      	; 0x5ea <__vector_18+0x3c>
 5e8:	59 c0       	rjmp	.+178    	; 0x69c <__vector_18+0xee>
 5ea:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <rxtail>
 5ee:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <rxhead>
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	29 1b       	sub	r18, r25
 5f6:	31 09       	sbc	r19, r1
 5f8:	21 50       	subi	r18, 0x01	; 1
 5fa:	31 09       	sbc	r19, r1
 5fc:	2f 73       	andi	r18, 0x3F	; 63
 5fe:	33 27       	eor	r19, r19
 600:	23 2b       	or	r18, r19
 602:	61 f0       	breq	.+24     	; 0x61c <__vector_18+0x6e>
 604:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <rxhead>
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	ef 5c       	subi	r30, 0xCF	; 207
 60c:	fe 4f       	sbci	r31, 0xFE	; 254
 60e:	80 83       	st	Z, r24
 610:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <rxhead>
 614:	9f 5f       	subi	r25, 0xFF	; 255
 616:	9f 73       	andi	r25, 0x3F	; 63
 618:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <rxhead>
 61c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
 620:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <txhead>
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	29 1b       	sub	r18, r25
 628:	31 09       	sbc	r19, r1
 62a:	21 50       	subi	r18, 0x01	; 1
 62c:	31 09       	sbc	r19, r1
 62e:	2f 73       	andi	r18, 0x3F	; 63
 630:	33 27       	eor	r19, r19
 632:	23 2b       	or	r18, r19
 634:	89 f0       	breq	.+34     	; 0x658 <__vector_18+0xaa>
 636:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <txhead>
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	ef 58       	subi	r30, 0x8F	; 143
 63e:	fe 4f       	sbci	r31, 0xFE	; 254
 640:	80 83       	st	Z, r24
 642:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <txhead>
 646:	9f 5f       	subi	r25, 0xFF	; 255
 648:	9f 73       	andi	r25, 0x3F	; 63
 64a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <txhead>
 64e:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 652:	90 62       	ori	r25, 0x20	; 32
 654:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 658:	8d 30       	cpi	r24, 0x0D	; 13
 65a:	09 f0       	breq	.+2      	; 0x65e <__vector_18+0xb0>
 65c:	c5 c0       	rjmp	.+394    	; 0x7e8 <__vector_18+0x23a>
 65e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 662:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <txhead>
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	82 1b       	sub	r24, r18
 66a:	91 09       	sbc	r25, r1
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	8f 73       	andi	r24, 0x3F	; 63
 670:	99 27       	eor	r25, r25
 672:	89 2b       	or	r24, r25
 674:	69 f0       	breq	.+26     	; 0x690 <__vector_18+0xe2>
 676:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <txhead>
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	ef 58       	subi	r30, 0x8F	; 143
 67e:	fe 4f       	sbci	r31, 0xFE	; 254
 680:	8a e0       	ldi	r24, 0x0A	; 10
 682:	80 83       	st	Z, r24
 684:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <txhead>
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	8f 73       	andi	r24, 0x3F	; 63
 68c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <txhead>
 690:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <packet_available>
 694:	8f 5f       	subi	r24, 0xFF	; 255
 696:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <packet_available>
 69a:	a6 c0       	rjmp	.+332    	; 0x7e8 <__vector_18+0x23a>
 69c:	88 30       	cpi	r24, 0x08	; 8
 69e:	11 f0       	breq	.+4      	; 0x6a4 <__vector_18+0xf6>
 6a0:	8f 37       	cpi	r24, 0x7F	; 127
 6a2:	c1 f5       	brne	.+112    	; 0x714 <__vector_18+0x166>
 6a4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 6a8:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <rxtail>
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	82 1b       	sub	r24, r18
 6b0:	91 09       	sbc	r25, r1
 6b2:	8f 73       	andi	r24, 0x3F	; 63
 6b4:	99 27       	eor	r25, r25
 6b6:	89 2b       	or	r24, r25
 6b8:	09 f4       	brne	.+2      	; 0x6bc <__vector_18+0x10e>
 6ba:	96 c0       	rjmp	.+300    	; 0x7e8 <__vector_18+0x23a>
 6bc:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <rxhead>
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	ef 5c       	subi	r30, 0xCF	; 207
 6c4:	fe 4f       	sbci	r31, 0xFE	; 254
 6c6:	80 81       	ld	r24, Z
 6c8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 6cc:	81 50       	subi	r24, 0x01	; 1
 6ce:	8f 73       	andi	r24, 0x3F	; 63
 6d0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <rxhead>
 6d4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 6d8:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <txhead>
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	82 1b       	sub	r24, r18
 6e0:	91 09       	sbc	r25, r1
 6e2:	01 97       	sbiw	r24, 0x01	; 1
 6e4:	8f 73       	andi	r24, 0x3F	; 63
 6e6:	99 27       	eor	r25, r25
 6e8:	89 2b       	or	r24, r25
 6ea:	09 f4       	brne	.+2      	; 0x6ee <__vector_18+0x140>
 6ec:	7d c0       	rjmp	.+250    	; 0x7e8 <__vector_18+0x23a>
 6ee:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <txhead>
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	ef 58       	subi	r30, 0x8F	; 143
 6f6:	fe 4f       	sbci	r31, 0xFE	; 254
 6f8:	8f e7       	ldi	r24, 0x7F	; 127
 6fa:	80 83       	st	Z, r24
 6fc:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <txhead>
 700:	8f 5f       	subi	r24, 0xFF	; 255
 702:	8f 73       	andi	r24, 0x3F	; 63
 704:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <txhead>
 708:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 70c:	80 62       	ori	r24, 0x20	; 32
 70e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 712:	6a c0       	rjmp	.+212    	; 0x7e8 <__vector_18+0x23a>
 714:	84 30       	cpi	r24, 0x04	; 4
 716:	09 f0       	breq	.+2      	; 0x71a <__vector_18+0x16c>
 718:	67 c0       	rjmp	.+206    	; 0x7e8 <__vector_18+0x23a>
 71a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 71e:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <rxtail>
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	82 1b       	sub	r24, r18
 726:	91 09       	sbc	r25, r1
 728:	8f 73       	andi	r24, 0x3F	; 63
 72a:	99 27       	eor	r25, r25
 72c:	89 2b       	or	r24, r25
 72e:	31 f1       	breq	.+76     	; 0x77c <__vector_18+0x1ce>
 730:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <rxhead>
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	ef 5c       	subi	r30, 0xCF	; 207
 738:	fe 4f       	sbci	r31, 0xFE	; 254
 73a:	80 81       	ld	r24, Z
 73c:	8d 30       	cpi	r24, 0x0D	; 13
 73e:	f1 f0       	breq	.+60     	; 0x77c <__vector_18+0x1ce>
 740:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <rxtail>
 744:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <rxhead>
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	82 1b       	sub	r24, r18
 74c:	91 09       	sbc	r25, r1
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	8f 73       	andi	r24, 0x3F	; 63
 752:	99 27       	eor	r25, r25
 754:	89 2b       	or	r24, r25
 756:	91 f0       	breq	.+36     	; 0x77c <__vector_18+0x1ce>
 758:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <rxhead>
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	ef 5c       	subi	r30, 0xCF	; 207
 760:	fe 4f       	sbci	r31, 0xFE	; 254
 762:	8d e0       	ldi	r24, 0x0D	; 13
 764:	80 83       	st	Z, r24
 766:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 76a:	8f 5f       	subi	r24, 0xFF	; 255
 76c:	8f 73       	andi	r24, 0x3F	; 63
 76e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <rxhead>
 772:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <packet_available>
 776:	8f 5f       	subi	r24, 0xFF	; 255
 778:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <packet_available>
 77c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <rxtail>
 780:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <rxhead>
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	82 1b       	sub	r24, r18
 788:	91 09       	sbc	r25, r1
 78a:	01 97       	sbiw	r24, 0x01	; 1
 78c:	8f 73       	andi	r24, 0x3F	; 63
 78e:	99 27       	eor	r25, r25
 790:	89 2b       	or	r24, r25
 792:	51 f1       	breq	.+84     	; 0x7e8 <__vector_18+0x23a>
 794:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <rxhead>
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	ef 5c       	subi	r30, 0xCF	; 207
 79c:	fe 4f       	sbci	r31, 0xFE	; 254
 79e:	84 e0       	ldi	r24, 0x04	; 4
 7a0:	19 c0       	rjmp	.+50     	; 0x7d4 <__vector_18+0x226>
 7a2:	83 30       	cpi	r24, 0x03	; 3
 7a4:	09 f5       	brne	.+66     	; 0x7e8 <__vector_18+0x23a>
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <socket_connected>
 7ac:	1d c0       	rjmp	.+58     	; 0x7e8 <__vector_18+0x23a>
 7ae:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <rxtail>
 7b2:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <rxhead>
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	82 1b       	sub	r24, r18
 7ba:	91 09       	sbc	r25, r1
 7bc:	01 97       	sbiw	r24, 0x01	; 1
 7be:	8f 73       	andi	r24, 0x3F	; 63
 7c0:	99 27       	eor	r25, r25
 7c2:	89 2b       	or	r24, r25
 7c4:	79 f0       	breq	.+30     	; 0x7e4 <__vector_18+0x236>
 7c6:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <rxhead>
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7d0:	ef 5c       	subi	r30, 0xCF	; 207
 7d2:	fe 4f       	sbci	r31, 0xFE	; 254
 7d4:	80 83       	st	Z, r24
 7d6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 7da:	8f 5f       	subi	r24, 0xFF	; 255
 7dc:	8f 73       	andi	r24, 0x3F	; 63
 7de:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <rxhead>
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <__vector_18+0x23a>
 7e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	9f 91       	pop	r25
 7ee:	8f 91       	pop	r24
 7f0:	3f 91       	pop	r19
 7f2:	2f 91       	pop	r18
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <__vector_19>:
 7fe:	1f 92       	push	r1
 800:	0f 92       	push	r0
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	0f 92       	push	r0
 806:	11 24       	eor	r1, r1
 808:	2f 93       	push	r18
 80a:	8f 93       	push	r24
 80c:	9f 93       	push	r25
 80e:	ef 93       	push	r30
 810:	ff 93       	push	r31
 812:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <txhead>
 816:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	82 1b       	sub	r24, r18
 81e:	91 09       	sbc	r25, r1
 820:	8f 73       	andi	r24, 0x3F	; 63
 822:	99 27       	eor	r25, r25
 824:	89 2b       	or	r24, r25
 826:	79 f0       	breq	.+30     	; 0x846 <__vector_19+0x48>
 828:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	ef 58       	subi	r30, 0x8F	; 143
 830:	fe 4f       	sbci	r31, 0xFE	; 254
 832:	80 81       	ld	r24, Z
 834:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 838:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 83c:	8f 5f       	subi	r24, 0xFF	; 255
 83e:	8f 73       	andi	r24, 0x3F	; 63
 840:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 844:	05 c0       	rjmp	.+10     	; 0x850 <__vector_19+0x52>
 846:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 84a:	8f 7d       	andi	r24, 0xDF	; 223
 84c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 850:	ff 91       	pop	r31
 852:	ef 91       	pop	r30
 854:	9f 91       	pop	r25
 856:	8f 91       	pop	r24
 858:	2f 91       	pop	r18
 85a:	0f 90       	pop	r0
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	0f 90       	pop	r0
 860:	1f 90       	pop	r1
 862:	18 95       	reti

00000864 <serial_rxchars>:
 864:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 868:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <rxtail>
 86c:	89 1b       	sub	r24, r25
 86e:	8f 73       	andi	r24, 0x3F	; 63
 870:	08 95       	ret

00000872 <serial_popchar>:
 872:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 876:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <rxtail>
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	82 1b       	sub	r24, r18
 87e:	91 09       	sbc	r25, r1
 880:	8f 73       	andi	r24, 0x3F	; 63
 882:	99 27       	eor	r25, r25
 884:	89 2b       	or	r24, r25
 886:	c1 f0       	breq	.+48     	; 0x8b8 <serial_popchar+0x46>
 888:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <rxtail>
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	ef 5c       	subi	r30, 0xCF	; 207
 890:	fe 4f       	sbci	r31, 0xFE	; 254
 892:	80 81       	ld	r24, Z
 894:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <rxtail>
 898:	9f 5f       	subi	r25, 0xFF	; 255
 89a:	9f 73       	andi	r25, 0x3F	; 63
 89c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <rxtail>
 8a0:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <socket_mode>
 8a4:	99 23       	and	r25, r25
 8a6:	49 f0       	breq	.+18     	; 0x8ba <serial_popchar+0x48>
 8a8:	8d 30       	cpi	r24, 0x0D	; 13
 8aa:	39 f4       	brne	.+14     	; 0x8ba <serial_popchar+0x48>
 8ac:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <packet_available>
 8b0:	91 50       	subi	r25, 0x01	; 1
 8b2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <packet_available>
 8b6:	08 95       	ret
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	08 95       	ret

000008bc <serial_isconnected>:
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <socket_mode>
 8c2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 8c6:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <rxtail>
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	82 1b       	sub	r24, r18
 8ce:	91 09       	sbc	r25, r1
 8d0:	8f 73       	andi	r24, 0x3F	; 63
 8d2:	99 27       	eor	r25, r25
 8d4:	89 2b       	or	r24, r25
 8d6:	b1 f0       	breq	.+44     	; 0x904 <__stack+0x5>
 8d8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <rxtail>
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	ef 5c       	subi	r30, 0xCF	; 207
 8e0:	fe 4f       	sbci	r31, 0xFE	; 254
 8e2:	80 81       	ld	r24, Z
 8e4:	84 30       	cpi	r24, 0x04	; 4
 8e6:	71 f4       	brne	.+28     	; 0x904 <__stack+0x5>
 8e8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <socket_connected>
 8ec:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <rxtail>
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	ef 5c       	subi	r30, 0xCF	; 207
 8f4:	fe 4f       	sbci	r31, 0xFE	; 254
 8f6:	80 81       	ld	r24, Z
 8f8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <rxtail>
 8fc:	8f 5f       	subi	r24, 0xFF	; 255
 8fe:	8f 73       	andi	r24, 0x3F	; 63
 900:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <rxtail>
 904:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <socket_connected>
 908:	08 95       	ret

0000090a <serial_is_packet_ready>:
 90a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <packet_available>
 90e:	08 95       	ret

00000910 <serial_writechar>:
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	07 fe       	sbrs	r0, 7
 914:	0e c0       	rjmp	.+28     	; 0x932 <serial_writechar+0x22>
 916:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
 91a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <txhead>
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	29 1b       	sub	r18, r25
 922:	31 09       	sbc	r19, r1
 924:	21 50       	subi	r18, 0x01	; 1
 926:	31 09       	sbc	r19, r1
 928:	2f 73       	andi	r18, 0x3F	; 63
 92a:	33 27       	eor	r19, r19
 92c:	23 2b       	or	r18, r19
 92e:	99 f3       	breq	.-26     	; 0x916 <serial_writechar+0x6>
 930:	0d c0       	rjmp	.+26     	; 0x94c <serial_writechar+0x3c>
 932:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
 936:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <txhead>
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	29 1b       	sub	r18, r25
 93e:	31 09       	sbc	r19, r1
 940:	21 50       	subi	r18, 0x01	; 1
 942:	31 09       	sbc	r19, r1
 944:	2f 73       	andi	r18, 0x3F	; 63
 946:	33 27       	eor	r19, r19
 948:	23 2b       	or	r18, r19
 94a:	61 f0       	breq	.+24     	; 0x964 <serial_writechar+0x54>
 94c:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <txhead>
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	ef 58       	subi	r30, 0x8F	; 143
 954:	fe 4f       	sbci	r31, 0xFE	; 254
 956:	80 83       	st	Z, r24
 958:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <txhead>
 95c:	8f 5f       	subi	r24, 0xFF	; 255
 95e:	8f 73       	andi	r24, 0x3F	; 63
 960:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <txhead>
 964:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 968:	80 62       	ori	r24, 0x20	; 32
 96a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 96e:	08 95       	ret

00000970 <serial_writestr>:
 970:	1f 93       	push	r17
 972:	cf 93       	push	r28
 974:	df 93       	push	r29
 976:	ec 01       	movw	r28, r24
 978:	80 e0       	ldi	r24, 0x00	; 0
 97a:	11 e0       	ldi	r17, 0x01	; 1
 97c:	18 0f       	add	r17, r24
 97e:	fe 01       	movw	r30, r28
 980:	e8 0f       	add	r30, r24
 982:	f1 1d       	adc	r31, r1
 984:	80 81       	ld	r24, Z
 986:	88 23       	and	r24, r24
 988:	21 f0       	breq	.+8      	; 0x992 <serial_writestr+0x22>
 98a:	0e 94 88 04 	call	0x910	; 0x910 <serial_writechar>
 98e:	81 2f       	mov	r24, r17
 990:	f4 cf       	rjmp	.-24     	; 0x97a <serial_writestr+0xa>
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	1f 91       	pop	r17
 998:	08 95       	ret

0000099a <serial_writestr_P>:
 99a:	1f 93       	push	r17
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	ec 01       	movw	r28, r24
 9a2:	80 e0       	ldi	r24, 0x00	; 0
 9a4:	11 e0       	ldi	r17, 0x01	; 1
 9a6:	18 0f       	add	r17, r24
 9a8:	fe 01       	movw	r30, r28
 9aa:	e8 0f       	add	r30, r24
 9ac:	f1 1d       	adc	r31, r1
 9ae:	84 91       	lpm	r24, Z
 9b0:	88 23       	and	r24, r24
 9b2:	21 f0       	breq	.+8      	; 0x9bc <serial_writestr_P+0x22>
 9b4:	0e 94 88 04 	call	0x910	; 0x910 <serial_writechar>
 9b8:	81 2f       	mov	r24, r17
 9ba:	f4 cf       	rjmp	.-24     	; 0x9a4 <serial_writestr_P+0xa>
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	08 95       	ret

000009c4 <__divmodsi4>:
 9c4:	05 2e       	mov	r0, r21
 9c6:	97 fb       	bst	r25, 7
 9c8:	1e f4       	brtc	.+6      	; 0x9d0 <__divmodsi4+0xc>
 9ca:	00 94       	com	r0
 9cc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__negsi2>
 9d0:	57 fd       	sbrc	r21, 7
 9d2:	07 d0       	rcall	.+14     	; 0x9e2 <__divmodsi4_neg2>
 9d4:	0e 94 0c 05 	call	0xa18	; 0xa18 <__udivmodsi4>
 9d8:	07 fc       	sbrc	r0, 7
 9da:	03 d0       	rcall	.+6      	; 0x9e2 <__divmodsi4_neg2>
 9dc:	4e f4       	brtc	.+18     	; 0x9f0 <__divmodsi4_exit>
 9de:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__negsi2>

000009e2 <__divmodsi4_neg2>:
 9e2:	50 95       	com	r21
 9e4:	40 95       	com	r20
 9e6:	30 95       	com	r19
 9e8:	21 95       	neg	r18
 9ea:	3f 4f       	sbci	r19, 0xFF	; 255
 9ec:	4f 4f       	sbci	r20, 0xFF	; 255
 9ee:	5f 4f       	sbci	r21, 0xFF	; 255

000009f0 <__divmodsi4_exit>:
 9f0:	08 95       	ret

000009f2 <__negsi2>:
 9f2:	90 95       	com	r25
 9f4:	80 95       	com	r24
 9f6:	70 95       	com	r23
 9f8:	61 95       	neg	r22
 9fa:	7f 4f       	sbci	r23, 0xFF	; 255
 9fc:	8f 4f       	sbci	r24, 0xFF	; 255
 9fe:	9f 4f       	sbci	r25, 0xFF	; 255
 a00:	08 95       	ret

00000a02 <__muluhisi3>:
 a02:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__umulhisi3>
 a06:	a5 9f       	mul	r26, r21
 a08:	90 0d       	add	r25, r0
 a0a:	b4 9f       	mul	r27, r20
 a0c:	90 0d       	add	r25, r0
 a0e:	a4 9f       	mul	r26, r20
 a10:	80 0d       	add	r24, r0
 a12:	91 1d       	adc	r25, r1
 a14:	11 24       	eor	r1, r1
 a16:	08 95       	ret

00000a18 <__udivmodsi4>:
 a18:	a1 e2       	ldi	r26, 0x21	; 33
 a1a:	1a 2e       	mov	r1, r26
 a1c:	aa 1b       	sub	r26, r26
 a1e:	bb 1b       	sub	r27, r27
 a20:	fd 01       	movw	r30, r26
 a22:	0d c0       	rjmp	.+26     	; 0xa3e <__udivmodsi4_ep>

00000a24 <__udivmodsi4_loop>:
 a24:	aa 1f       	adc	r26, r26
 a26:	bb 1f       	adc	r27, r27
 a28:	ee 1f       	adc	r30, r30
 a2a:	ff 1f       	adc	r31, r31
 a2c:	a2 17       	cp	r26, r18
 a2e:	b3 07       	cpc	r27, r19
 a30:	e4 07       	cpc	r30, r20
 a32:	f5 07       	cpc	r31, r21
 a34:	20 f0       	brcs	.+8      	; 0xa3e <__udivmodsi4_ep>
 a36:	a2 1b       	sub	r26, r18
 a38:	b3 0b       	sbc	r27, r19
 a3a:	e4 0b       	sbc	r30, r20
 a3c:	f5 0b       	sbc	r31, r21

00000a3e <__udivmodsi4_ep>:
 a3e:	66 1f       	adc	r22, r22
 a40:	77 1f       	adc	r23, r23
 a42:	88 1f       	adc	r24, r24
 a44:	99 1f       	adc	r25, r25
 a46:	1a 94       	dec	r1
 a48:	69 f7       	brne	.-38     	; 0xa24 <__udivmodsi4_loop>
 a4a:	60 95       	com	r22
 a4c:	70 95       	com	r23
 a4e:	80 95       	com	r24
 a50:	90 95       	com	r25
 a52:	9b 01       	movw	r18, r22
 a54:	ac 01       	movw	r20, r24
 a56:	bd 01       	movw	r22, r26
 a58:	cf 01       	movw	r24, r30
 a5a:	08 95       	ret

00000a5c <__umulhisi3>:
 a5c:	a2 9f       	mul	r26, r18
 a5e:	b0 01       	movw	r22, r0
 a60:	b3 9f       	mul	r27, r19
 a62:	c0 01       	movw	r24, r0
 a64:	a3 9f       	mul	r26, r19
 a66:	70 0d       	add	r23, r0
 a68:	81 1d       	adc	r24, r1
 a6a:	11 24       	eor	r1, r1
 a6c:	91 1d       	adc	r25, r1
 a6e:	b2 9f       	mul	r27, r18
 a70:	70 0d       	add	r23, r0
 a72:	81 1d       	adc	r24, r1
 a74:	11 24       	eor	r1, r1
 a76:	91 1d       	adc	r25, r1
 a78:	08 95       	ret

00000a7a <_exit>:
 a7a:	f8 94       	cli

00000a7c <__stop_program>:
 a7c:	ff cf       	rjmp	.-2      	; 0xa7c <__stop_program>
