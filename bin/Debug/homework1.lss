
bin/Debug/homework1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  000004fe  00000592  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  000004d6  000004d6  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000084  0080019a  0080019a  0000062c  2**0
                  ALLOC
  4 .stab         00000654  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000942  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015e4  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  000021ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_18>
  4c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  68:	38 01       	movw	r6, r16
  6a:	60 01       	movw	r12, r0
  6c:	60 01       	movw	r12, r0
  6e:	60 01       	movw	r12, r0
  70:	60 01       	movw	r12, r0
  72:	60 01       	movw	r12, r0
  74:	60 01       	movw	r12, r0
  76:	60 01       	movw	r12, r0
  78:	3d 01       	movw	r6, r26
  7a:	60 01       	movw	r12, r0
  7c:	60 01       	movw	r12, r0
  7e:	60 01       	movw	r12, r0
  80:	60 01       	movw	r12, r0
  82:	60 01       	movw	r12, r0
  84:	60 01       	movw	r12, r0
  86:	60 01       	movw	r12, r0
  88:	42 01       	movw	r8, r4
  8a:	60 01       	movw	r12, r0
  8c:	60 01       	movw	r12, r0
  8e:	60 01       	movw	r12, r0
  90:	60 01       	movw	r12, r0
  92:	60 01       	movw	r12, r0
  94:	60 01       	movw	r12, r0
  96:	60 01       	movw	r12, r0
  98:	47 01       	movw	r8, r14
  9a:	60 01       	movw	r12, r0
  9c:	60 01       	movw	r12, r0
  9e:	60 01       	movw	r12, r0
  a0:	60 01       	movw	r12, r0
  a2:	60 01       	movw	r12, r0
  a4:	60 01       	movw	r12, r0
  a6:	60 01       	movw	r12, r0
  a8:	4c 01       	movw	r8, r24
  aa:	60 01       	movw	r12, r0
  ac:	60 01       	movw	r12, r0
  ae:	60 01       	movw	r12, r0
  b0:	60 01       	movw	r12, r0
  b2:	60 01       	movw	r12, r0
  b4:	60 01       	movw	r12, r0
  b6:	60 01       	movw	r12, r0
  b8:	51 01       	movw	r10, r2
  ba:	60 01       	movw	r12, r0
  bc:	60 01       	movw	r12, r0
  be:	60 01       	movw	r12, r0
  c0:	60 01       	movw	r12, r0
  c2:	60 01       	movw	r12, r0
  c4:	60 01       	movw	r12, r0
  c6:	60 01       	movw	r12, r0
  c8:	56 01       	movw	r10, r12
  ca:	60 01       	movw	r12, r0
  cc:	60 01       	movw	r12, r0
  ce:	60 01       	movw	r12, r0
  d0:	60 01       	movw	r12, r0
  d2:	60 01       	movw	r12, r0
  d4:	60 01       	movw	r12, r0
  d6:	60 01       	movw	r12, r0
  d8:	5b 01       	movw	r10, r22

000000da <__ctors_end>:
  da:	11 24       	eor	r1, r1
  dc:	1f be       	out	0x3f, r1	; 63
  de:	cf ef       	ldi	r28, 0xFF	; 255
  e0:	d8 e0       	ldi	r29, 0x08	; 8
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
  e6:	11 e0       	ldi	r17, 0x01	; 1
  e8:	a0 e0       	ldi	r26, 0x00	; 0
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	ee ef       	ldi	r30, 0xFE	; 254
  ee:	f4 e0       	ldi	r31, 0x04	; 4
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
  f2:	05 90       	lpm	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	aa 39       	cpi	r26, 0x9A	; 154
  f8:	b1 07       	cpc	r27, r17
  fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
  fc:	22 e0       	ldi	r18, 0x02	; 2
  fe:	aa e9       	ldi	r26, 0x9A	; 154
 100:	b1 e0       	ldi	r27, 0x01	; 1
 102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
 104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
 106:	ae 31       	cpi	r26, 0x1E	; 30
 108:	b2 07       	cpc	r27, r18
 10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
 10c:	0e 94 8c 00 	call	0x118	; 0x118 <main>
 110:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <main>:
/////////////////////////////////////////////////////////////////////////////////
/**
 * Program entry point.
 */
int main(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	64 97       	sbiw	r28, 0x14	; 20
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
    char* str1 = "Hello World from Atmega328\n";
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	9a 83       	std	Y+2, r25	; 0x02
 132:	89 83       	std	Y+1, r24	; 0x01
    char* str2 = "SER486 -- Homework Assignment 1\n";
 134:	8c e1       	ldi	r24, 0x1C	; 28
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	9c 83       	std	Y+4, r25	; 0x04
 13a:	8b 83       	std	Y+3, r24	; 0x03
    char* str3 = "Andrew Goodman\n";
 13c:	8d e3       	ldi	r24, 0x3D	; 61
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	9e 83       	std	Y+6, r25	; 0x06
 142:	8d 83       	std	Y+5, r24	; 0x05
    char* str4 = "char size = ";
 144:	8d e4       	ldi	r24, 0x4D	; 77
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	98 87       	std	Y+8, r25	; 0x08
 14a:	8f 83       	std	Y+7, r24	; 0x07
    char* str5 = "int size = ";
 14c:	8a e5       	ldi	r24, 0x5A	; 90
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	9a 87       	std	Y+10, r25	; 0x0a
 152:	89 87       	std	Y+9, r24	; 0x09
    char* str6 = "long size = ";
 154:	86 e6       	ldi	r24, 0x66	; 102
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	9c 87       	std	Y+12, r25	; 0x0c
 15a:	8b 87       	std	Y+11, r24	; 0x0b
    char* str7 = " bits\n";
 15c:	83 e7       	ldi	r24, 0x73	; 115
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	9e 87       	std	Y+14, r25	; 0x0e
 162:	8d 87       	std	Y+13, r24	; 0x0d
    int char_size = 8 * sizeof(char);
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	98 8b       	std	Y+16, r25	; 0x10
 16a:	8f 87       	std	Y+15, r24	; 0x0f
    int int_size = 8 * sizeof(int);
 16c:	80 e1       	ldi	r24, 0x10	; 16
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	9a 8b       	std	Y+18, r25	; 0x12
 172:	89 8b       	std	Y+17, r24	; 0x11
    int long_size = 8 * sizeof(long);
 174:	80 e2       	ldi	r24, 0x20	; 32
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	9c 8b       	std	Y+20, r25	; 0x14
 17a:	8b 8b       	std	Y+19, r24	; 0x13

    uart_init();
 17c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <uart_init>

    writestr(str1);
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
    writestr(str2);
 188:	8b 81       	ldd	r24, Y+3	; 0x03
 18a:	9c 81       	ldd	r25, Y+4	; 0x04
 18c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
    writestr(str3);
 190:	8d 81       	ldd	r24, Y+5	; 0x05
 192:	9e 81       	ldd	r25, Y+6	; 0x06
 194:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
    writestr(str4);
 198:	8f 81       	ldd	r24, Y+7	; 0x07
 19a:	98 85       	ldd	r25, Y+8	; 0x08
 19c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
    print_bits(char_size);
 1a0:	8f 85       	ldd	r24, Y+15	; 0x0f
 1a2:	98 89       	ldd	r25, Y+16	; 0x10
 1a4:	0e 94 1d 01 	call	0x23a	; 0x23a <print_bits>
    writestr(str7);
 1a8:	8d 85       	ldd	r24, Y+13	; 0x0d
 1aa:	9e 85       	ldd	r25, Y+14	; 0x0e
 1ac:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
    writestr(str5);
 1b0:	89 85       	ldd	r24, Y+9	; 0x09
 1b2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
    print_bits(int_size);
 1b8:	89 89       	ldd	r24, Y+17	; 0x11
 1ba:	9a 89       	ldd	r25, Y+18	; 0x12
 1bc:	0e 94 1d 01 	call	0x23a	; 0x23a <print_bits>
    writestr(str7);
 1c0:	8d 85       	ldd	r24, Y+13	; 0x0d
 1c2:	9e 85       	ldd	r25, Y+14	; 0x0e
 1c4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
    writestr(str6);
 1c8:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ca:	9c 85       	ldd	r25, Y+12	; 0x0c
 1cc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
    print_bits(long_size);
 1d0:	8b 89       	ldd	r24, Y+19	; 0x13
 1d2:	9c 89       	ldd	r25, Y+20	; 0x14
 1d4:	0e 94 1d 01 	call	0x23a	; 0x23a <print_bits>
    writestr(str7);
 1d8:	8d 85       	ldd	r24, Y+13	; 0x0d
 1da:	9e 85       	ldd	r25, Y+14	; 0x0e
 1dc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>

    while(1);
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <main+0xc8>

000001e2 <writestr>:
/**
 * Repeatedly calls a char printing function to print a string.
 *
 * @param str the string to be printed.
 */
void writestr(char* str){
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	00 d0       	rcall	.+0      	; 0x1e8 <writestr+0x6>
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <writestr+0x8>
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	9c 83       	std	Y+4, r25	; 0x04
 1f0:	8b 83       	std	Y+3, r24	; 0x03
    int i = 0;
 1f2:	1a 82       	std	Y+2, r1	; 0x02
 1f4:	19 82       	std	Y+1, r1	; 0x01
    while(str[i] != '\0'){
 1f6:	0f c0       	rjmp	.+30     	; 0x216 <writestr+0x34>
        uart_writechar(str[i]);
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	9a 81       	ldd	r25, Y+2	; 0x02
 1fc:	2b 81       	ldd	r18, Y+3	; 0x03
 1fe:	3c 81       	ldd	r19, Y+4	; 0x04
 200:	82 0f       	add	r24, r18
 202:	93 1f       	adc	r25, r19
 204:	fc 01       	movw	r30, r24
 206:	80 81       	ld	r24, Z
 208:	0e 94 6d 01 	call	0x2da	; 0x2da <uart_writechar>
        i++;
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	9a 81       	ldd	r25, Y+2	; 0x02
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	9a 83       	std	Y+2, r25	; 0x02
 214:	89 83       	std	Y+1, r24	; 0x01
 *
 * @param str the string to be printed.
 */
void writestr(char* str){
    int i = 0;
    while(str[i] != '\0'){
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	9a 81       	ldd	r25, Y+2	; 0x02
 21a:	2b 81       	ldd	r18, Y+3	; 0x03
 21c:	3c 81       	ldd	r19, Y+4	; 0x04
 21e:	82 0f       	add	r24, r18
 220:	93 1f       	adc	r25, r19
 222:	fc 01       	movw	r30, r24
 224:	80 81       	ld	r24, Z
 226:	88 23       	and	r24, r24
 228:	39 f7       	brne	.-50     	; 0x1f8 <writestr+0x16>
        uart_writechar(str[i]);
        i++;
    }
}
 22a:	00 00       	nop
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <print_bits>:
/**
 * A helper function for converting bit numbers into a printable string.
 *
 * @param num_bits an integer to be converted to string.
 */
void print_bits(int num_bits){
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	00 d0       	rcall	.+0      	; 0x240 <print_bits+0x6>
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	9a 83       	std	Y+2, r25	; 0x02
 246:	89 83       	std	Y+1, r24	; 0x01
    switch(num_bits){
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	09 2e       	mov	r0, r25
 24e:	00 0c       	add	r0, r0
 250:	aa 0b       	sbc	r26, r26
 252:	bb 0b       	sbc	r27, r27
 254:	48 e0       	ldi	r20, 0x08	; 8
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	28 e3       	ldi	r18, 0x38	; 56
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	84 1b       	sub	r24, r20
 25e:	95 0b       	sbc	r25, r21
 260:	28 17       	cp	r18, r24
 262:	39 07       	cpc	r19, r25
 264:	68 f1       	brcs	.+90     	; 0x2c0 <print_bits+0x86>
 266:	8c 5c       	subi	r24, 0xCC	; 204
 268:	9f 4f       	sbci	r25, 0xFF	; 255
 26a:	fc 01       	movw	r30, r24
 26c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__tablejump2__>
    case 8:
        writestr("8");
 270:	8a e7       	ldi	r24, 0x7A	; 122
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
        break;
 278:	27 c0       	rjmp	.+78     	; 0x2c8 <print_bits+0x8e>
    case 16:
        writestr("16");
 27a:	8c e7       	ldi	r24, 0x7C	; 124
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
        break;
 282:	22 c0       	rjmp	.+68     	; 0x2c8 <print_bits+0x8e>
    case 24:
        writestr("24");
 284:	8f e7       	ldi	r24, 0x7F	; 127
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
        break;
 28c:	1d c0       	rjmp	.+58     	; 0x2c8 <print_bits+0x8e>
    case 32:
        writestr("32");
 28e:	82 e8       	ldi	r24, 0x82	; 130
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
        break;
 296:	18 c0       	rjmp	.+48     	; 0x2c8 <print_bits+0x8e>
    case 40:
        writestr("40");
 298:	85 e8       	ldi	r24, 0x85	; 133
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
        break;
 2a0:	13 c0       	rjmp	.+38     	; 0x2c8 <print_bits+0x8e>
    case 48:
        writestr("48");
 2a2:	88 e8       	ldi	r24, 0x88	; 136
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
        break;
 2aa:	0e c0       	rjmp	.+28     	; 0x2c8 <print_bits+0x8e>
    case 56:
        writestr("56");
 2ac:	8b e8       	ldi	r24, 0x8B	; 139
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
        break;
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <print_bits+0x8e>
    case 64:
        writestr("64");
 2b6:	8e e8       	ldi	r24, 0x8E	; 142
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
        break;
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <print_bits+0x8e>
    default:
        writestr("too many");
 2c0:	81 e9       	ldi	r24, 0x91	; 145
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <writestr>
    }
}
 2c8:	00 00       	nop
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <uart_init>:
 2d4:	03 d0       	rcall	.+6      	; 0x2dc <serial_init>
 2d6:	78 94       	sei
 2d8:	08 95       	ret

000002da <uart_writechar>:
 2da:	98 c0       	rjmp	.+304    	; 0x40c <serial_writechar>

000002dc <serial_init>:
 2dc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2e0:	83 e3       	ldi	r24, 0x33	; 51
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2ec:	e1 ec       	ldi	r30, 0xC1	; 193
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	88 e1       	ldi	r24, 0x18	; 24
 2f2:	80 83       	st	Z, r24
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2fa:	80 81       	ld	r24, Z
 2fc:	80 6a       	ori	r24, 0xA0	; 160
 2fe:	80 83       	st	Z, r24
 300:	08 95       	ret

00000302 <__vector_18>:
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	2f 93       	push	r18
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
 316:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <rxtail>
 31a:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <rxhead>
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	82 1b       	sub	r24, r18
 322:	91 09       	sbc	r25, r1
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	8f 73       	andi	r24, 0x3F	; 63
 328:	99 27       	eor	r25, r25
 32a:	89 2b       	or	r24, r25
 32c:	79 f0       	breq	.+30     	; 0x34c <__vector_18+0x4a>
 32e:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <rxhead>
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 338:	e2 56       	subi	r30, 0x62	; 98
 33a:	fe 4f       	sbci	r31, 0xFE	; 254
 33c:	80 83       	st	Z, r24
 33e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <rxhead>
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	8f 73       	andi	r24, 0x3F	; 63
 346:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <rxhead>
 34a:	02 c0       	rjmp	.+4      	; 0x350 <__vector_18+0x4e>
 34c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 350:	ff 91       	pop	r31
 352:	ef 91       	pop	r30
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <__vector_19>:
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	2f 93       	push	r18
 370:	8f 93       	push	r24
 372:	9f 93       	push	r25
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
 378:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <txhead>
 37c:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end>
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	82 1b       	sub	r24, r18
 384:	91 09       	sbc	r25, r1
 386:	8f 73       	andi	r24, 0x3F	; 63
 388:	99 27       	eor	r25, r25
 38a:	89 2b       	or	r24, r25
 38c:	79 f0       	breq	.+30     	; 0x3ac <__vector_19+0x48>
 38e:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <__data_end>
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	e2 52       	subi	r30, 0x22	; 34
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	80 81       	ld	r24, Z
 39a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 39e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
 3a2:	8f 5f       	subi	r24, 0xFF	; 255
 3a4:	8f 73       	andi	r24, 0x3F	; 63
 3a6:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <__vector_19+0x52>
 3ac:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3b0:	8f 7d       	andi	r24, 0xDF	; 223
 3b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	2f 91       	pop	r18
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <serial_rxchars>:
 3ca:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <rxhead>
 3ce:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <rxtail>
 3d2:	89 1b       	sub	r24, r25
 3d4:	8f 73       	andi	r24, 0x3F	; 63
 3d6:	08 95       	ret

000003d8 <serial_popchar>:
 3d8:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <rxhead>
 3dc:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <rxtail>
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	82 1b       	sub	r24, r18
 3e4:	91 09       	sbc	r25, r1
 3e6:	8f 73       	andi	r24, 0x3F	; 63
 3e8:	99 27       	eor	r25, r25
 3ea:	89 2b       	or	r24, r25
 3ec:	69 f0       	breq	.+26     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ee:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <rxtail>
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	e2 56       	subi	r30, 0x62	; 98
 3f6:	fe 4f       	sbci	r31, 0xFE	; 254
 3f8:	80 81       	ld	r24, Z
 3fa:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <rxtail>
 3fe:	9f 5f       	subi	r25, 0xFF	; 255
 400:	9f 73       	andi	r25, 0x3F	; 63
 402:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <rxtail>
 406:	08 95       	ret
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	08 95       	ret

0000040c <serial_writechar>:
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	07 fe       	sbrs	r0, 7
 410:	0e c0       	rjmp	.+28     	; 0x42e <serial_writechar+0x22>
 412:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end>
 416:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <txhead>
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	29 1b       	sub	r18, r25
 41e:	31 09       	sbc	r19, r1
 420:	21 50       	subi	r18, 0x01	; 1
 422:	31 09       	sbc	r19, r1
 424:	2f 73       	andi	r18, 0x3F	; 63
 426:	33 27       	eor	r19, r19
 428:	23 2b       	or	r18, r19
 42a:	99 f3       	breq	.-26     	; 0x412 <serial_writechar+0x6>
 42c:	0d c0       	rjmp	.+26     	; 0x448 <serial_writechar+0x3c>
 42e:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end>
 432:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <txhead>
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	29 1b       	sub	r18, r25
 43a:	31 09       	sbc	r19, r1
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	31 09       	sbc	r19, r1
 440:	2f 73       	andi	r18, 0x3F	; 63
 442:	33 27       	eor	r19, r19
 444:	23 2b       	or	r18, r19
 446:	61 f0       	breq	.+24     	; 0x460 <serial_writechar+0x54>
 448:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <txhead>
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	e2 52       	subi	r30, 0x22	; 34
 450:	fe 4f       	sbci	r31, 0xFE	; 254
 452:	80 83       	st	Z, r24
 454:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <txhead>
 458:	8f 5f       	subi	r24, 0xFF	; 255
 45a:	8f 73       	andi	r24, 0x3F	; 63
 45c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <txhead>
 460:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 464:	80 62       	ori	r24, 0x20	; 32
 466:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 46a:	08 95       	ret

0000046c <serial_writestr>:
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	c8 2f       	mov	r28, r24
 474:	d9 2f       	mov	r29, r25
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	11 e0       	ldi	r17, 0x01	; 1
 47a:	19 0f       	add	r17, r25
 47c:	ec 2f       	mov	r30, r28
 47e:	fd 2f       	mov	r31, r29
 480:	e9 0f       	add	r30, r25
 482:	f1 1d       	adc	r31, r1
 484:	80 81       	ld	r24, Z
 486:	88 23       	and	r24, r24
 488:	19 f0       	breq	.+6      	; 0x490 <serial_writestr+0x24>
 48a:	c0 df       	rcall	.-128    	; 0x40c <serial_writechar>
 48c:	91 2f       	mov	r25, r17
 48e:	f4 cf       	rjmp	.-24     	; 0x478 <serial_writestr+0xc>
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	08 95       	ret

00000498 <serial_writestr_P>:
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	c8 2f       	mov	r28, r24
 4a0:	d9 2f       	mov	r29, r25
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	11 e0       	ldi	r17, 0x01	; 1
 4a6:	19 0f       	add	r17, r25
 4a8:	ec 2f       	mov	r30, r28
 4aa:	fd 2f       	mov	r31, r29
 4ac:	e9 0f       	add	r30, r25
 4ae:	f1 1d       	adc	r31, r1
 4b0:	c8 95       	lpm
 4b2:	80 2d       	mov	r24, r0
 4b4:	88 23       	and	r24, r24
 4b6:	19 f0       	breq	.+6      	; 0x4be <serial_writestr_P+0x26>
 4b8:	a9 df       	rcall	.-174    	; 0x40c <serial_writechar>
 4ba:	91 2f       	mov	r25, r17
 4bc:	f3 cf       	rjmp	.-26     	; 0x4a4 <serial_writestr_P+0xc>
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	08 95       	ret

000004c6 <__tablejump2__>:
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	05 90       	lpm	r0, Z+
 4cc:	f4 91       	lpm	r31, Z
 4ce:	e0 2d       	mov	r30, r0
 4d0:	09 94       	ijmp

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
